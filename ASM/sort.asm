ASSUME CS: CODE, DS: DATA, SS: STACK

STACK SEGMENT PARA STACK 'STACK'
    DW 128 DUP(?)
STACK ENDS

DATA SEGMENT
    array DB 05H, 04H, 00H, 01H, 06H, 07H, 02H, 08H, 09H, 03H
    n DB 0AH
DATA ENDS

CODE SEGMENT
    INIT:
        MOV AX, DATA
        MOV DS, AX
        MOV AX, STACK
        MOV SS, AX
        MOV SP, 128
        JMP BACK

    SWAP:
        XCHG AL, BL
        JMP INNER_BACK

    PRINT_AL:
        ADD AL, '0'
        MOV DL, AL
        MOV AH, 02H
        INT 21H
        RET

    PRINT_ARRAY:
        MOV SI, OFFSET array
        MOV CL, n
    PRINT_LOOP:
        MOV AL, [SI]
        CALL PRINT_AL
        INC SI
        DEC CL
        JNZ PRINT_LOOP
        RET

    INNER:
        MOV CL, CH
        MOV SI, OFFSET array
    INNER_LOOP:
        MOV AL, [SI]
        MOV BL, [SI + 1]
        CMP BL, AL
        JBE SWAP
    INNER_BACK:
        MOV [SI], AL
        MOV [SI + 1], BL
        INC SI
        DEC CL
        JNZ INNER_LOOP
        RET

    START:
        JMP INIT
    BACK:
        CALL PRINT_ARRAY
    OUTER:
        MOV CH, n
        DEC CH    
    OUTER_LOOP:
        CALL INNER
        DEC CH
        JNZ OUTER_LOOP
    STOP:
        CALL PRINT_ARRAY
        MOV AH, 4CH
        INT 21H
        
CODE ENDS
END START

COMMENT @@@
8086 TRAINER KIT
MEMORY:
0800   05
0801   04
0802   00
0803   01
0804   06
0805   07
0806   02
0807   08
0808   09
0809   03
080A   0A


CODE:
0300: MOV CH, [080A]
0302: DEC CH
0303: CALL 030E
0306: DEC CH
0307: JNZ 0303
0309: HLT
030B: XCHG AL, BL
030C: JMP 031A
030E: MOV CL, CH
0310: MOV SI, OFFSET [0800]
0312: MOV AL, [SI]
0314: MOV BL, [SI + 1]
0316: CMP BL, AL
0318: JBE [030B]
031A: MOV [SI], AL
031C: MOV [SI + 1], BL
031E: INC SI
031F: DEC CL
0320: JNZ 0312
0322: RET
@@@